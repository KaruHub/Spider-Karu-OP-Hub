local OrionLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/jensonhirst/Orion/main/source'))()
local player = game.Players.LocalPlayer
local itemsFolder = game.Workspace:WaitForChild("Items")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local window = OrionLib:MakeWindow({Name = "Spider-Karu-OP-Hub", HidePremium = false})
local teleportTab = window:MakeTab({Name = "Teleport", Icon = "rbxassetid://6031075938"})
local miscTab = window:MakeTab({Name = "Misc", Icon = "rbxassetid://6031075938"})
local autoFarmTab = window:MakeTab({Name = "AutoFarm", Icon = "rbxassetid://6031075938"})

local function updateDropdown()
    local items = {}
    for _, item in pairs(itemsFolder:GetChildren()) do
        if item:IsA("Model") and item.PrimaryPart then
            table.insert(items, item.Name)
        end
    end
    return items
end

-- Create the dropdown menu once, no updates needed
teleportTab:AddDropdown({
    Name = "Select Item to Teleport",
    Default = "None",
    Options = updateDropdown(),
    Callback = function(Value)
        local item = itemsFolder:FindFirstChild(Value)
        if item and item.PrimaryPart then
            enableNoClip()  -- Enable no-clip before teleporting
            player.Character:SetPrimaryPartCFrame(item.PrimaryPart.CFrame)
        end
    end
})

-- Function to enable no-clip
local function enableNoClip()
    local character = player.Character
    if character then
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
end

-- Teleport buttons for specified locations
local teleportLocations = {
    {Name = "Exit", Position = CFrame.new(500, 60, 90)},
    {Name = "Bunker", Position = CFrame.new(571, 44, 78)},
    {Name = "Outside Cabin", Position = CFrame.new(443, 62, 69)},
    {Name = "Spawn", Position = CFrame.new(520, 63, -63)},
    {Name = "Staircase", Position = CFrame.new(531, 72, 1)},
    {Name = "Safe Place", Position = CFrame.new(506, 63, 118)}
}

for _, location in pairs(teleportLocations) do
    teleportTab:AddButton({
        Name = "Teleport to " .. location.Name,
        Callback = function()
            player.Character:SetPrimaryPartCFrame(location.Position)
        end
    })
end

-- ESP toggle
local espEnabled = false
local function highlightPlayers()
    -- Remove old highlights when ESP is toggled off
    for _, targetPlayer in ipairs(Players:GetPlayers()) do
        local oldHighlight = targetPlayer.Character:FindFirstChild("Highlight")
        if oldHighlight then
            oldHighlight:Destroy()
        end
    end

    -- Add new highlights if ESP is enabled
    if espEnabled then
        for _, targetPlayer in ipairs(Players:GetPlayers()) do
            if targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local highlight = Instance.new("Highlight")
                highlight.Parent = targetPlayer.Character
                highlight.Name = "Highlight"
                highlight.Adornee = targetPlayer.Character
                highlight.FillColor = Color3.fromRGB(255, 255, 0)
                highlight.FillTransparency = 0.5
                highlight.OutlineTransparency = 0.5
                highlight.Enabled = true
            end
        end
    end
end

-- ESP toggle using Tab:AddToggle method
miscTab:AddToggle({
    Name = "ESP",
    Default = false,
    Callback = function(Value)
        espEnabled = Value
        highlightPlayers()
    end
})

-- WalkSpeed slider
miscTab:AddSlider({
    Name = "WalkSpeed",
    Min = 0,
    Max = 1000,
    Default = 16,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    ValueName = "WalkSpeed",
    Callback = function(Value)
        player.Character:WaitForChild("Humanoid").WalkSpeed = Value
    end
})

-- JumpPower slider
miscTab:AddSlider({
    Name = "JumpPower",
    Min = 0,
    Max = 1000,
    Default = 50,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    ValueName = "JumpPower",
    Callback = function(Value)
        player.Character:WaitForChild("Humanoid").JumpPower = Value
    end
})

-- Anti-AFK button
miscTab:AddButton({
    Name = "Anti-AFK",
    Callback = function()
        spawn(function()
            while true do
                -- Keeps the player active every 60 seconds
                game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame
                wait(60)
            end
        end)
    end
})

-- AutoFarm with toggle to start/stop
local autoFarmEnabled = false
local duration = 8  -- Time in seconds to stay inside each player
local function teleportInside(targetPlayer)
    local targetCharacter = targetPlayer.Character
    if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
        local targetHRP = targetCharacter:WaitForChild("HumanoidRootPart")
        player.Character.HumanoidRootPart.CFrame = targetHRP.CFrame
    end
end

-- Loop kill all (Spider) toggle
autoFarmTab:AddToggle({
    Name = "Loop kill all (Spider)",
    Default = false,
    Callback = function(Value)
        autoFarmEnabled = Value
        if autoFarmEnabled then
            -- Start AutoFarm loop
            spawn(function()
                while autoFarmEnabled do
                    for _, targetPlayer in ipairs(Players:GetPlayers()) do
                        if targetPlayer ~= player and targetPlayer.Character then
                            teleportInside(targetPlayer)
                            wait(duration)
                        end
                    end
                end
            end)
        end
    end
})

-- Kill all (Spider) button
autoFarmTab:AddButton({
    Name = "Kill all (Spider)",
    Callback = function()
        for _, targetPlayer in ipairs(Players:GetPlayers()) do
            if targetPlayer ~= player and targetPlayer.Character then
                teleportInside(targetPlayer)
                wait(duration)
            end
        end
    end
})

window:Toggle()
